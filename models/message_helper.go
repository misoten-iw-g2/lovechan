// Code generated by goagen v1.3.0, DO NOT EDIT.
//
// API "pei0804/goa-stater": Model Helpers
//
// Command:
// $ goagen
// --design=github.com/pei0804/goa-stater/design
// --out=$(GOPATH)/src/github.com/pei0804/goa-stater
// --version=v1.3.0

package models

import (
	"context"
	"time"

	"github.com/goadesign/goa"
	"github.com/jinzhu/gorm"
	"github.com/misoten-iw-g2/lovechan/app"
)

// MediaType Retrieval Functions

// ListMessagetype returns an array of view: default.
func (m *MessageDB) ListMessagetype(ctx context.Context) []*app.Messagetype {
	defer goa.MeasureSince([]string{"goa", "db", "messagetype", "listmessagetype"}, time.Now())

	var native []*Message
	var objs []*app.Messagetype
	err := m.Db.Scopes().Table(m.TableName()).Find(&native).Error

	if err != nil {
		goa.LogError(ctx, "error listing Message", "error", err.Error())
		return objs
	}

	for _, t := range native {
		objs = append(objs, t.MessageToMessagetype())
	}

	return objs
}

// MessageToMessagetype loads a Message and builds the default view of media type Messagetype.
func (m *Message) MessageToMessagetype() *app.Messagetype {
	message := &app.Messagetype{}
	message.ID = m.ID
	message.Message = m.Message

	return message
}

// OneMessagetype loads a Message and builds the default view of media type Messagetype.
func (m *MessageDB) OneMessagetype(ctx context.Context, id int) (*app.Messagetype, error) {
	defer goa.MeasureSince([]string{"goa", "db", "messagetype", "onemessagetype"}, time.Now())

	var native Message
	err := m.Db.Scopes().Table(m.TableName()).Where("id = ?", id).Find(&native).Error

	if err != nil && err != gorm.ErrRecordNotFound {
		goa.LogError(ctx, "error getting Message", "error", err.Error())
		return nil, err
	}

	view := *native.MessageToMessagetype()
	return &view, err
}
