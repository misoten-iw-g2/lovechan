// Code generated by goagen v1.3.0, DO NOT EDIT.
//
// API "pei0804/goa-stater": Models
//
// Command:
// $ goagen
// --design=github.com/pei0804/goa-stater/design
// --out=$(GOPATH)/src/github.com/pei0804/goa-stater
// --version=v1.3.0

package models

import (
	"context"
	"time"

	"app/app"

	"github.com/goadesign/goa"
	"github.com/jinzhu/gorm"
)

// Message model
type Message struct {
	ID        int `gorm:"primary_key"` // primary key
	CreatedAt time.Time
	DeletedAt *time.Time
	Message   string
	UpdatedAt time.Time
}

// TableName overrides the table name settings in Gorm to force a specific table name
// in the database.
func (m Message) TableName() string {
	return "messages"

}

// MessageDB is the implementation of the storage interface for
// Message.
type MessageDB struct {
	Db *gorm.DB
}

// NewMessageDB creates a new storage type.
func NewMessageDB(db *gorm.DB) *MessageDB {
	return &MessageDB{Db: db}
}

// DB returns the underlying database.
func (m *MessageDB) DB() interface{} {
	return m.Db
}

// MessageStorage represents the storage interface.
type MessageStorage interface {
	DB() interface{}
	List(ctx context.Context) ([]*Message, error)
	Get(ctx context.Context, id int) (*Message, error)
	Add(ctx context.Context, message *Message) error
	Update(ctx context.Context, message *Message) error
	Delete(ctx context.Context, id int) error

	ListMessagetype(ctx context.Context) []*app.Messagetype
	OneMessagetype(ctx context.Context, id int) (*app.Messagetype, error)
}

// TableName overrides the table name settings in Gorm to force a specific table name
// in the database.
func (m *MessageDB) TableName() string {
	return "messages"

}

// CRUD Functions

// Get returns a single Message as a Database Model
// This is more for use internally, and probably not what you want in  your controllers
func (m *MessageDB) Get(ctx context.Context, id int) (*Message, error) {
	defer goa.MeasureSince([]string{"goa", "db", "message", "get"}, time.Now())

	var native Message
	err := m.Db.Table(m.TableName()).Where("id = ?", id).Find(&native).Error
	if err == gorm.ErrRecordNotFound {
		return nil, err
	}

	return &native, err
}

// List returns an array of Message
func (m *MessageDB) List(ctx context.Context) ([]*Message, error) {
	defer goa.MeasureSince([]string{"goa", "db", "message", "list"}, time.Now())

	var objs []*Message
	err := m.Db.Table(m.TableName()).Find(&objs).Error
	if err != nil && err != gorm.ErrRecordNotFound {
		return nil, err
	}

	return objs, nil
}

// Add creates a new record.
func (m *MessageDB) Add(ctx context.Context, model *Message) error {
	defer goa.MeasureSince([]string{"goa", "db", "message", "add"}, time.Now())

	err := m.Db.Create(model).Error
	if err != nil {
		goa.LogError(ctx, "error adding Message", "error", err.Error())
		return err
	}

	return nil
}

// Update modifies a single record.
func (m *MessageDB) Update(ctx context.Context, model *Message) error {
	defer goa.MeasureSince([]string{"goa", "db", "message", "update"}, time.Now())

	obj, err := m.Get(ctx, model.ID)
	if err != nil {
		goa.LogError(ctx, "error updating Message", "error", err.Error())
		return err
	}
	err = m.Db.Model(obj).Updates(model).Error

	return err
}

// Delete removes a single record.
func (m *MessageDB) Delete(ctx context.Context, id int) error {
	defer goa.MeasureSince([]string{"goa", "db", "message", "delete"}, time.Now())

	var obj Message

	err := m.Db.Delete(&obj, id).Error

	if err != nil {
		goa.LogError(ctx, "error deleting Message", "error", err.Error())
		return err
	}

	return nil
}
